generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String      @id         @default(uuid())
  name                        String
  email                       String      @unique
  imageUrl                    String?
  registrationNo              String?     @unique
  bio                         String?
  userRole                    Role                    @default(STUDENT)
  isEmailVerified             Boolean                 @default(false)
  phoneNumber                 String?
  semester                    String?
  department                  String?
  gender                      Gender
  jobRole                     String?
  status                      Status                  @default(AVAILABLE)
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt

  // Relationships
  sentMessages                Messages[]              @relation("SentMessages")
  senderSingleChat            SingleChatRoom[]        @relation("UserSender")
  receverSingleChat           SingleChatRoom[]        @relation("UserReceiver")
  groupChatRooms              GroupChatRoom[]         @relation("GroupParticipants")
  adminOfGroups               GroupChatRoom[]         @relation("GroupAdmin")
}

model Messages {
  id                          String      @id         @default(uuid())
  message                     String
  roomId                      String
  senderId                    String
  singleChatRoomId            String?
  groupChatRoomId             String?                    
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt

  // Relationships
  sender                      User                    @relation("SentMessages", fields: [senderId], references: [id])
  singleChatRoom              SingleChatRoom?         @relation(fields: [singleChatRoomId], references: [id])
  groupChatRoom               GroupChatRoom?          @relation(fields: [groupChatRoomId], references: [id])
}

model SingleChatRoom {
  id                          String      @id         @default(uuid())
  messages                    Messages[]
  senderId                    String
  receverId                   String
  blocked                     Boolean

  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt

  // Relationships
  sender                      User                    @relation("UserSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver                    User                    @relation("UserReceiver", fields: [receverId], references: [id], onDelete: Cascade)
                                                      @@unique([senderId, receverId])
}

model GroupChatRoom{
  id                          String      @id         @default(uuid())
  roomName                    String
  roomAdminId                 String

  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt

  // Relationships
  participants                User[]                  @relation("GroupParticipants")
  roomAdmin                   User                    @relation("GroupAdmin", fields: [roomAdminId], references: [id])
  messages                    Messages[]
}


enum Status {
  AVAILABLE
  NOT_AVAILABLE
}


enum Role {
  STUDENT
  STAFF
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

